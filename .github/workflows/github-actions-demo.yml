name: GitHub Actions Demo
on:
  pull_request:
    types: [opened, synchronize]
jobs:
  fetchLanguages:
    name: Fetch Languages in Repo
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.get-present-languages.outputs.LANGUAGES }}
    steps:
      - name: Get Present Languages
        id: get-present-languages
        run: echo "LANGUAGES=$(curl -s ${{ github.event.repository.languages_url }} | jq -r 'keys[]')" >> $GITHUB_OUTPUT
  getMergeBase:
    name: Get Merge Base and Diff
    runs-on: ubuntu-latest
    outputs:
      merge_base: ${{ steps.get-merge-base.outputs.MERGE_BASE }}
    steps:
      - name: Check out repo (full history)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Get merge-base
        id: get-merge-base
        run: echo "MERGE_BASE=$(git merge-base origin/${{ github.base_ref }} HEAD)" >> $GITHUB_OUTPUT
  parsePython:
    name: Parse Python Maps
    runs-on: ubuntu-latest
    container:
      image: 'us-docker.pkg.dev/plumbr/sourcefield-public/lsif-python-pyright:e854776'
    needs:
      - fetchLanguages
      - getMergeBase
    if: contains(needs.fetchLanguages.outputs.languages, 'Python')
    steps:
      - name: Check out repo (full history)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
#      - name: Fetch history back to merge-base
#        run: |
#          commits=${{ github.event.pull_request.commits }}
#          if [[ -n "$commits" ]]; then
#            git fetch --depth="$(( commits + 1 ))"
#          fi
      - name: Run LSIF parser on base ref
        run: |
          git checkout ${{ needs.getMergeBase.outputs.merge_base }}
          lsif-python index --project-name="${{ github.repository }}" --output="lsif-output-base.json"
      - name: Upload map for base commit
        uses: actions/upload-artifact@v3
        with:
          name: map-base-python
          path: lsif-output-base.json
          retention-days: 1
      - name: Run LSIF parser on head ref
        run: |
          git checkout ${{ github.event.pull_request.head.sha }}
          lsif-python index --project-name="${{ github.repository }}" --output="lsif-output-head.json"
      - name: Upload map for head commit
        uses: actions/upload-artifact@v3
        with:
          name: map-head-python
          path: lsif-output-head.json
          retention-days: 1

  processPython:
    name: Process and Diff Python Maps
    runs-on: ubuntu-latest
    container:
      image: 'us-docker.pkg.dev/plumbr/sourcefield-public/parse-processor/lsif-processor:9b94ddf'
    needs:
      - fetchLanguages
      - getMergeBase
      - parsePython
    if: contains(needs.fetchLanguages.outputs.languages, 'Python')
    steps:
      - name: Check out repo (full history)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Get diff
        run: git diff origin/${{ github.base_ref }}...${{ github.event.pull_request.head.sha }} > diff.txt
      - name: Download base map
        uses: actions/download-artifact@v3
        with:
          name: map-base-python
#          path: lsif-output-base.json
      - name: Checkout merge-base
        run:
      - name: Run parse processor on base map
        run: |
          git checkout ${{ needs.getMergeBase.outputs.merge_base }}
          cd /sourcefield
          python3 -m processor.python --filename="${GITHUB_WORKSPACE}/lsif-output-base.json" - run

#      - name: LSIF Parser
#        uses: docker://us-docker.pkg.dev/plumbr/sourcefield-public/lsif-python-pyright:e854776
#        with:
#          entrypoint: /bin/ls
#          args: -lah /github/workspace
#      - name: Run LSIF parser
#        uses: addnab/docker-run-action@v3
#        with:
#          image: us-docker.pkg.dev/plumbr/sourcefield-public/lsif-python-pyright:e854776
#          options: -v ${{ github.workspace }}:/github/workspace
#          run: |
#            ls -lah /github/workspace
#            cd /github/workspace
#            lsif-python index --project-name="${{ github.repository }}" --output="output.json"
#            head output.json

  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Hello world from Docker
        uses: ./ # Uses an action in the root directory
        id: hello
        with:
          who-to-greet: 'awesome'
      - uses: rmacklin/fetch-through-merge-base@v0
        with:
          base_ref: ${{ github.base_ref }}
          head_ref: ${{ github.event.pull_request.head.sha }}
      # now we've fetched commits through the merge-base of the source branch
      # and target branch of the pull request, so we can do things like:
      - run: echo "MERGE_BASE=$(git merge-base origin/${{ github.base_ref }} ${{ github.event.pull_request.head.sha }})" >> $GITHUB_ENV
      - run: echo "merge base = ${{ env.MERGE_BASE }}"
      - run: echo "HEAD = ${{ github.event.pull_request.head.sha }}"
      - run: git log --oneline main..
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - name: Find changed files
        run: |
          echo 'LS_DIFF<<EOF' >> $GITHUB_ENV
          git diff --name-only origin/${{ github.base_ref }}...${{ github.event.pull_request.head.sha }} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Update or create PR comment
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            Changed files:
            ```
            ${{ env.LS_DIFF }}
            ```
            Commit: ${{ github.event.pull_request.head.sha }}
            <details><summary>Event payload</summary>
            
            ```json
            ${{ toJson(github.event) }}
            ```
            
            ```
            ${{ env.EVENT_CONTENTS }}
            ```
            </details>
          comment_includes: 'Changed files:'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
